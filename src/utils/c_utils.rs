//use bcrypt::{hash,DEFAULT_COST};
use std::env;

use time::strftime;
use uuid::Uuid;

/// [时间]
///
/// 标准北京时间，时区为东八区；如果商户的系统时间为非标准北京时间。
/// 参数值必须根据商户系统所在时区先换算成标准北京时间，
/// 例如商户所在地为0时区的伦敦，当地时间为2014年11月11日0时0分0秒，
/// 换算成北京时间为2014年11月11日8时0分0秒。
pub fn get_time_str() -> String {
    // FIXME:: 如果是服务器在海外中国网站就会有问题
    strftime("%Y%m%d%H%M%S", &time::now()).unwrap()
}

/// [时间戳]
///
/// 标准北京时间，时区为东八区，自1970年1月1日 0点0分0秒以来的秒数。
/// 注意：部分系统取到的值为毫秒级，需要转换成秒(10位数字)。
pub fn get_timestamp() -> i64 {
    time::get_time().sec
}

/// [生成随机数算法]
///
/// 字段nonce_str，主要保证签名不可预测。
/// 我们推荐生成随机数算法如下：调用随机数函数生成，将得到的值转换为字符串。
pub fn get_nonce_str() -> String {
    Uuid::new_v4().simple().to_string()
}

/// [商户订单号]
///
/// 商户支付的订单号由商户自定义生成，微信支付要求商户订单号保持唯一性
/// （建议根据当前系统时间加随机序列来生成订单号）。
/// 重新发起一笔支付要使用原订单号，避免重复支付；
/// 已支付过或已调用关单、撤销（请见后文的API列表）的订单号不能重新发起支付。
pub fn get_order_no() -> String {
    get_time_str() + &((&get_nonce_str())[..18])
}
